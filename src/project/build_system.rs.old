use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fs;
use std::path::{Path, PathBuf};

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum BuildSystem {
    Cargo,  // Rust
    Npm,    // Node.js
    Yarn,   // Node.js
    Pnpm,   // Node.js
    Poetry, // Python
    Pip,    // Python
    Maven,  // Java
    Gradle, // Java
    Go,     // Go
    Make,   // Generic
    Unknown,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BuildConfig {
    pub system: BuildSystem,
    pub root_path: PathBuf,
    pub config_files: Vec<PathBuf>,
    pub commands: BuildCommands,
    pub dependencies: Vec<String>,
    pub dev_dependencies: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BuildCommands {
    pub build: Option<String>,
    pub test: Option<String>,
    pub lint: Option<String>,
    pub format: Option<String>,
    pub run: Option<String>,
    pub clean: Option<String>,
    pub custom: HashMap<String, String>,
}

impl Default for BuildCommands {
    fn default() -> Self {
        Self {
            build: None,
            test: None,
            lint: None,
            format: None,
            run: None,
            clean: None,
            custom: HashMap::new(),
        }
    }
}

pub struct BuildSystemDetector;

impl BuildSystemDetector {
    pub fn detect(project_root: &Path) -> Result<BuildConfig> {
        // Check for various build system files
        if project_root.join("Cargo.toml").exists() {
            Self::detect_cargo(project_root)
        } else if project_root.join("package.json").exists() {
            Self::detect_node(project_root)
        } else if project_root.join("pyproject.toml").exists() {
            Self::detect_poetry(project_root)
        } else if project_root.join("requirements.txt").exists()
            || project_root.join("setup.py").exists()
        {
            Self::detect_pip(project_root)
        } else if project_root.join("pom.xml").exists() {
            Self::detect_maven(project_root)
        } else if project_root.join("build.gradle").exists()
            || project_root.join("build.gradle.kts").exists()
        {
            Self::detect_gradle(project_root)
        } else if project_root.join("go.mod").exists() {
            Self::detect_go(project_root)
        } else if project_root.join("Makefile").exists() {
            Self::detect_make(project_root)
        } else {
            Ok(BuildConfig {
                system: BuildSystem::Unknown,
                root_path: project_root.to_path_buf(),
                config_files: vec![],
                commands: BuildCommands::default(),
                dependencies: vec![],
                dev_dependencies: vec![],
            })
        }
    }

    fn detect_cargo(project_root: &Path) -> Result<BuildConfig> {
        let cargo_toml_path = project_root.join("Cargo.toml");
        let content = fs::read_to_string(&cargo_toml_path).context("Failed to read Cargo.toml")?;

        let toml: toml::Value = toml::from_str(&content).context("Failed to parse Cargo.toml")?;

        let mut commands = BuildCommands::default();
        commands.build = Some("cargo build".to_string());
        commands.test = Some("cargo test".to_string());
        commands.lint = Some("cargo clippy".to_string());
        commands.format = Some("cargo fmt".to_string());
        commands.run = Some("cargo run".to_string());
        commands.clean = Some("cargo clean".to_string());

        // Extract custom commands from aliases
        if let Some(alias_section) = toml.get("alias") {
            if let Some(aliases) = alias_section.as_table() {
                for (name, value) in aliases {
                    if let Some(cmd) = value.as_str() {
                        commands
                            .custom
                            .insert(name.clone(), format!("cargo {}", cmd));
                    }
                }
            }
        }

        // Extract dependencies
        let mut dependencies = vec![];
        let mut dev_dependencies = vec![];

        if let Some(deps) = toml.get("dependencies") {
            if let Some(deps_table) = deps.as_table() {
                dependencies.extend(deps_table.keys().cloned());
            }
        }

        if let Some(dev_deps) = toml.get("dev-dependencies") {
            if let Some(dev_deps_table) = dev_deps.as_table() {
                dev_dependencies.extend(dev_deps_table.keys().cloned());
            }
        }

        Ok(BuildConfig {
            system: BuildSystem::Cargo,
            root_path: project_root.to_path_buf(),
            config_files: vec![cargo_toml_path],
            commands,
            dependencies,
            dev_dependencies,
        })
    }

    fn detect_node(project_root: &Path) -> Result<BuildConfig> {
        let package_json_path = project_root.join("package.json");
        let content =
            fs::read_to_string(&package_json_path).context("Failed to read package.json")?;

        let package_json: serde_json::Value =
            serde_json::from_str(&content).context("Failed to parse package.json")?;

        // Determine the package manager
        let system = if project_root.join("yarn.lock").exists() {
            BuildSystem::Yarn
        } else if project_root.join("pnpm-lock.yaml").exists() {
            BuildSystem::Pnpm
        } else {
            BuildSystem::Npm
        };

        let mut commands = BuildCommands::default();

        // Extract scripts
        if let Some(scripts) = package_json.get("scripts") {
            if let Some(scripts_obj) = scripts.as_object() {
                for (name, value) in scripts_obj {
                    if let Some(cmd) = value.as_str() {
                        match name.as_str() {
                            "build" => {
                                commands.build =
                                    Some(format!("{} run build", Self::node_cmd(&system)))
                            }
                            "test" => {
                                commands.test =
                                    Some(format!("{} run test", Self::node_cmd(&system)))
                            }
                            "lint" => {
                                commands.lint =
                                    Some(format!("{} run lint", Self::node_cmd(&system)))
                            }
                            "format" => {
                                commands.format =
                                    Some(format!("{} run format", Self::node_cmd(&system)))
                            }
                            "start" | "dev" => {
                                commands.run =
                                    Some(format!("{} run {}", Self::node_cmd(&system), name))
                            }
                            "clean" => {
                                commands.clean =
                                    Some(format!("{} run clean", Self::node_cmd(&system)))
                            }
                            _ => {
                                commands.custom.insert(
                                    name.clone(),
                                    format!("{} run {}", Self::node_cmd(&system), name),
                                );
                            }
                        }
                    }
                }
            }
        }

        // Extract dependencies
        let mut dependencies = vec![];
        let mut dev_dependencies = vec![];

        if let Some(deps) = package_json.get("dependencies") {
            if let Some(deps_obj) = deps.as_object() {
                dependencies.extend(deps_obj.keys().cloned());
            }
        }

        if let Some(dev_deps) = package_json.get("devDependencies") {
            if let Some(dev_deps_obj) = dev_deps.as_object() {
                dev_dependencies.extend(dev_deps_obj.keys().cloned());
            }
        }

        let mut config_files = vec![package_json_path];
        if system == BuildSystem::Yarn && project_root.join("yarn.lock").exists() {
            config_files.push(project_root.join("yarn.lock"));
        } else if system == BuildSystem::Pnpm && project_root.join("pnpm-lock.yaml").exists() {
            config_files.push(project_root.join("pnpm-lock.yaml"));
        } else if project_root.join("package-lock.json").exists() {
            config_files.push(project_root.join("package-lock.json"));
        }

        Ok(BuildConfig {
            system,
            root_path: project_root.to_path_buf(),
            config_files,
            commands,
            dependencies,
            dev_dependencies,
        })
    }

    fn detect_poetry(project_root: &Path) -> Result<BuildConfig> {
        let pyproject_path = project_root.join("pyproject.toml");
        let content =
            fs::read_to_string(&pyproject_path).context("Failed to read pyproject.toml")?;

        let toml: toml::Value =
            toml::from_str(&content).context("Failed to parse pyproject.toml")?;

        let mut commands = BuildCommands::default();
        commands.build = Some("poetry build".to_string());
        commands.test = Some("poetry run pytest".to_string());
        commands.lint = Some("poetry run flake8".to_string());
        commands.format = Some("poetry run black .".to_string());
        commands.run = Some("poetry run python".to_string());
        commands.clean = Some("poetry env remove python".to_string());

        // Extract scripts from [tool.poetry.scripts]
        if let Some(tool) = toml.get("tool") {
            if let Some(poetry) = tool.get("poetry") {
                if let Some(scripts) = poetry.get("scripts") {
                    if let Some(scripts_table) = scripts.as_table() {
                        for (name, _) in scripts_table {
                            commands
                                .custom
                                .insert(name.clone(), format!("poetry run {}", name));
                        }
                    }
                }
            }
        }

        // Extract dependencies
        let mut dependencies = vec![];
        let mut dev_dependencies = vec![];

        if let Some(tool) = toml.get("tool") {
            if let Some(poetry) = tool.get("poetry") {
                if let Some(deps) = poetry.get("dependencies") {
                    if let Some(deps_table) = deps.as_table() {
                        dependencies.extend(deps_table.keys().filter(|k| *k != "python").cloned());
                    }
                }

                if let Some(dev_deps) = poetry.get("dev-dependencies") {
                    if let Some(dev_deps_table) = dev_deps.as_table() {
                        dev_dependencies.extend(dev_deps_table.keys().cloned());
                    }
                }
            }
        }

        let mut config_files = vec![pyproject_path];
        if project_root.join("poetry.lock").exists() {
            config_files.push(project_root.join("poetry.lock"));
        }

        Ok(BuildConfig {
            system: BuildSystem::Poetry,
            root_path: project_root.to_path_buf(),
            config_files,
            commands,
            dependencies,
            dev_dependencies,
        })
    }

    fn detect_pip(project_root: &Path) -> Result<BuildConfig> {
        let mut commands = BuildCommands::default();
        commands.test = Some("python -m pytest".to_string());
        commands.lint = Some("python -m flake8".to_string());
        commands.format = Some("python -m black .".to_string());
        commands.run = Some("python".to_string());

        let mut config_files = vec![];
        let mut dependencies = vec![];

        // Check for requirements.txt
        let requirements_path = project_root.join("requirements.txt");
        if requirements_path.exists() {
            config_files.push(requirements_path.clone());

            // Parse requirements.txt
            if let Ok(content) = fs::read_to_string(&requirements_path) {
                for line in content.lines() {
                    let line = line.trim();
                    if !line.is_empty() && !line.starts_with('#') {
                        // Extract package name (before any version specifier)
                        let package_name = line
                            .split(&['=', '>', '<', '!', '~', ';'][..])
                            .next()
                            .unwrap_or(line)
                            .trim();
                        dependencies.push(package_name.to_string());
                    }
                }
            }
        }

        // Check for setup.py
        if project_root.join("setup.py").exists() {
            config_files.push(project_root.join("setup.py"));
            commands.build = Some("python setup.py build".to_string());
        }

        Ok(BuildConfig {
            system: BuildSystem::Pip,
            root_path: project_root.to_path_buf(),
            config_files,
            commands,
            dependencies,
            dev_dependencies: vec![],
        })
    }

    fn detect_maven(project_root: &Path) -> Result<BuildConfig> {
        let pom_path = project_root.join("pom.xml");

        let mut commands = BuildCommands::default();
        commands.build = Some("mvn compile".to_string());
        commands.test = Some("mvn test".to_string());
        commands.run = Some("mvn exec:java".to_string());
        commands.clean = Some("mvn clean".to_string());
        commands
            .custom
            .insert("package".to_string(), "mvn package".to_string());
        commands
            .custom
            .insert("install".to_string(), "mvn install".to_string());

        // Parse dependencies from pom.xml
        let (dependencies, dev_dependencies) = Self::parse_maven_dependencies(&pom_path)?;

        Ok(BuildConfig {
            system: BuildSystem::Maven,
            root_path: project_root.to_path_buf(),
            config_files: vec![pom_path],
            commands,
            dependencies,
            dev_dependencies,
        })
    }

    fn detect_gradle(project_root: &Path) -> Result<BuildConfig> {
        let mut config_files = vec![];
        if project_root.join("build.gradle").exists() {
            config_files.push(project_root.join("build.gradle"));
        }
        if project_root.join("build.gradle.kts").exists() {
            config_files.push(project_root.join("build.gradle.kts"));
        }

        let mut commands = BuildCommands::default();
        let gradle_cmd = if project_root.join("gradlew").exists() {
            "./gradlew"
        } else {
            "gradle"
        };

        commands.build = Some(format!("{} build", gradle_cmd));
        commands.test = Some(format!("{} test", gradle_cmd));
        commands.run = Some(format!("{} run", gradle_cmd));
        commands.clean = Some(format!("{} clean", gradle_cmd));

        // Parse dependencies from build.gradle or build.gradle.kts
        let (dependencies, dev_dependencies) = if let Some(gradle_file) = config_files.first() {
            Self::parse_gradle_dependencies(gradle_file)?
        } else {
            (vec![], vec![])
        };

        Ok(BuildConfig {
            system: BuildSystem::Gradle,
            root_path: project_root.to_path_buf(),
            config_files,
            commands,
            dependencies,
            dev_dependencies,
        })
    }

    fn detect_go(project_root: &Path) -> Result<BuildConfig> {
        let go_mod_path = project_root.join("go.mod");

        let mut commands = BuildCommands::default();
        commands.build = Some("go build".to_string());
        commands.test = Some("go test ./...".to_string());
        commands.lint = Some("go vet ./...".to_string());
        commands.format = Some("go fmt ./...".to_string());
        commands.run = Some("go run .".to_string());
        commands.clean = Some("go clean".to_string());

        let mut config_files = vec![go_mod_path.clone()];
        if project_root.join("go.sum").exists() {
            config_files.push(project_root.join("go.sum"));
        }

        // Parse dependencies from go.mod
        let dependencies = Self::parse_go_dependencies(&go_mod_path)?;

        Ok(BuildConfig {
            system: BuildSystem::Go,
            root_path: project_root.to_path_buf(),
            config_files,
            commands,
            dependencies,
            dev_dependencies: vec![], // Go doesn't have a separate dev dependencies concept
        })
    }

    fn detect_make(project_root: &Path) -> Result<BuildConfig> {
        let makefile_path = project_root.join("Makefile");

        let mut commands = BuildCommands::default();

        // Try to parse common targets from Makefile
        if let Ok(content) = fs::read_to_string(&makefile_path) {
            for line in content.lines() {
                if let Some(target) = line.strip_suffix(':') {
                    let target = target.trim();
                    if !target.starts_with('.') && !target.contains(' ') {
                        match target {
                            "build" | "all" => commands.build = Some(format!("make {}", target)),
                            "test" | "check" => commands.test = Some(format!("make {}", target)),
                            "lint" => commands.lint = Some(format!("make {}", target)),
                            "format" | "fmt" => commands.format = Some(format!("make {}", target)),
                            "run" | "start" => commands.run = Some(format!("make {}", target)),
                            "clean" => commands.clean = Some(format!("make {}", target)),
                            _ => {
                                commands
                                    .custom
                                    .insert(target.to_string(), format!("make {}", target));
                            }
                        }
                    }
                }
            }
        }

        // Set defaults if not found
        commands.build.get_or_insert("make".to_string());
        commands.clean.get_or_insert("make clean".to_string());

        Ok(BuildConfig {
            system: BuildSystem::Make,
            root_path: project_root.to_path_buf(),
            config_files: vec![makefile_path],
            commands,
            dependencies: vec![],
            dev_dependencies: vec![],
        })
    }

    fn node_cmd(system: &BuildSystem) -> &'static str {
        match system {
            BuildSystem::Yarn => "yarn",
            BuildSystem::Pnpm => "pnpm",
            _ => "npm",
        }
    }

    fn parse_maven_dependencies(pom_path: &Path) -> Result<(Vec<String>, Vec<String>)> {
        use quick_xml::events::Event;
        use quick_xml::reader::Reader;

        let mut dependencies = Vec::new();
        let mut dev_dependencies = Vec::new();
        
        let pom_content = fs::read_to_string(pom_path)
            .context("Failed to read pom.xml")?;
        
        let mut reader = Reader::from_str(&pom_content);
        reader.trim_text(true);
        
        let mut buf = Vec::new();
        let mut in_dependencies = false;
        let mut in_dependency = false;
        let mut in_test_scope = false;
        let mut current_group_id = String::new();
        let mut current_artifact_id = String::new();
        let mut current_element = String::new();
        
        loop {
            match reader.read_event_into(&mut buf) {
                Ok(Event::Start(ref e)) => {
                    let name = e.name();
                    let name_str = std::str::from_utf8(name.as_ref())
                        .unwrap_or_default()
                        .to_string();
                    current_element = name_str.clone();
                    
                    match name_str.as_str() {
                        "dependencies" => in_dependencies = true,
                        "dependency" if in_dependencies => {
                            in_dependency = true;
                            in_test_scope = false;
                            current_group_id.clear();
                            current_artifact_id.clear();
                        }
                        _ => {}
                    }
                }
                Ok(Event::End(ref e)) => {
                    let name = e.name();
                    let name_str = std::str::from_utf8(name.as_ref())
                        .unwrap_or_default();
                    
                    match name_str {
                        "dependencies" => in_dependencies = false,
                        "dependency" if in_dependencies => {
                            in_dependency = false;
                            if !current_group_id.is_empty() && !current_artifact_id.is_empty() {
                                let dep = format!("{}:{}", current_group_id, current_artifact_id);
                                if in_test_scope {
                                    dev_dependencies.push(dep);
                                } else {
                                    dependencies.push(dep);
                                }
                            }
                        }
                        _ => {}
                    }
                }
                Ok(Event::Text(ref e)) if in_dependency => {
                    let text = e.unescape().unwrap_or_default().to_string();
                    match current_element.as_str() {
                        "groupId" => current_group_id = text,
                        "artifactId" => current_artifact_id = text,
                        "scope" => {
                            if text == "test" {
                                in_test_scope = true;
                            }
                        }
                        _ => {}
                    }
                }
                Ok(Event::Eof) => break,
                Err(e) => return Err(anyhow::anyhow!("Error parsing pom.xml: {}", e)),
                _ => {}
            }
            buf.clear();
        }
        
        Ok((dependencies, dev_dependencies))
    }

    fn parse_gradle_dependencies(gradle_file: &Path) -> Result<(Vec<String>, Vec<String>)> {
        let mut dependencies = Vec::new();
        let mut dev_dependencies = Vec::new();
        
        let content = fs::read_to_string(gradle_file)
            .context("Failed to read Gradle build file")?;
        
        let is_kotlin = gradle_file.extension()
            .and_then(|e| e.to_str())
            .map(|e| e == "kts")
            .unwrap_or(false);
        
        // State tracking
        let mut in_dependencies_block = false;
        let mut current_config = String::new();
        let mut brace_count = 0;
        let mut in_string = false;
        let mut escape_next = false;
        
        // Process line by line
        for line in content.lines() {
            let trimmed = line.trim();
            
            // Skip empty lines and comments
            if trimmed.is_empty() || trimmed.starts_with("//") {
                continue;
            }
            
            // Track string state to avoid matching keywords inside strings
            for ch in line.chars() {
                if escape_next {
                    escape_next = false;
                    continue;
                }
                
                match ch {
                    '\\' => escape_next = true,
                    '"' => in_string = !in_string,
                    '{' if !in_string => {
                        if in_dependencies_block {
                            brace_count += 1;
                        }
                    }
                    '}' if !in_string => {
                        if in_dependencies_block {
                            if brace_count == 0 {
                                in_dependencies_block = false;
                                current_config.clear();
                            } else {
                                brace_count -= 1;
                            }
                        }
                    }
                    _ => {}
                }
            }
            
            // Check for dependencies block
            if trimmed.starts_with("dependencies") && trimmed.contains('{') {
                in_dependencies_block = true;
                brace_count = 0;
                continue;
            }
            
            // Parse dependencies within the block
            if in_dependencies_block && brace_count == 0 {
                // Parse dependency declarations
                let dep_line = if is_kotlin {
                    Self::parse_kotlin_dependency(trimmed)
                } else {
                    Self::parse_groovy_dependency(trimmed)
                };
                
                if let Some((config, dep)) = dep_line {
                    // Determine if it's a test dependency
                    let is_test = config.contains("test") || 
                                  config.contains("Test") ||
                                  config == "androidTest";
                    
                    if is_test {
                        dev_dependencies.push(dep);
                    } else {
                        dependencies.push(dep);
                    }
                }
            }
        }
        
        // Remove duplicates
        dependencies.sort();
        dependencies.dedup();
        dev_dependencies.sort();
        dev_dependencies.dedup();
        
        Ok((dependencies, dev_dependencies))
    }
    
    fn parse_groovy_dependency(line: &str) -> Option<(String, String)> {
        // Groovy syntax: implementation 'group:artifact:version'
        // or: implementation group: 'group', name: 'artifact', version: 'version'
        
        let line = line.trim();
        
        // Skip lines that don't look like dependencies
        if !line.contains("'") && !line.contains("\"") {
            return None;
        }
        
        // Extract configuration name (implementation, api, testImplementation, etc.)
        let parts: Vec<&str> = line.splitn(2, |c: char| c.is_whitespace()).collect();
        if parts.len() < 2 {
            return None;
        }
        
        let config = parts[0];
        let dep_part = parts[1].trim();
        
        // Handle string notation: 'group:artifact:version'
        if let Some(start) = dep_part.find(|c| c == '\'' || c == '"') {
            let quote_char = dep_part.chars().nth(start).unwrap();
            if let Some(end) = dep_part[start + 1..].find(quote_char) {
                let dep_str = &dep_part[start + 1..start + 1 + end];
                let parts: Vec<&str> = dep_str.split(':').collect();
                if parts.len() >= 2 {
                    return Some((config.to_string(), format!("{}:{}", parts[0], parts[1])));
                }
            }
        }
        
        // Handle map notation: group: 'com.example', name: 'library'
        if dep_part.contains("group:") && dep_part.contains("name:") {
            let group = Self::extract_gradle_value(dep_part, "group");
            let name = Self::extract_gradle_value(dep_part, "name");
            if let (Some(g), Some(n)) = (group, name) {
                return Some((config.to_string(), format!("{}:{}", g, n)));
            }
        }
        
        None
    }
    
    fn parse_kotlin_dependency(line: &str) -> Option<(String, String)> {
        // Kotlin syntax: implementation("group:artifact:version")
        
        let line = line.trim();
        
        // Find function call pattern
        if let Some(paren_start) = line.find('(') {
            let config = &line[..paren_start];
            if let Some(paren_end) = line.rfind(')') {
                let content = &line[paren_start + 1..paren_end].trim();
                
                // Remove quotes
                let content = content.trim_matches(|c| c == '"' || c == '\'');
                
                // Parse dependency notation
                let parts: Vec<&str> = content.split(':').collect();
                if parts.len() >= 2 {
                    return Some((config.to_string(), format!("{}:{}", parts[0], parts[1])));
                }
            }
        }
        
        None
    }
    
    fn extract_gradle_value(line: &str, key: &str) -> Option<String> {
        let key_pattern = format!("{}:", key);
        if let Some(key_pos) = line.find(&key_pattern) {
            let after_key = &line[key_pos + key_pattern.len()..].trim();
            
            // Find quoted value
            if let Some(quote_start) = after_key.find(|c| c == '\'' || c == '"') {
                let quote_char = after_key.chars().nth(quote_start).unwrap();
                if let Some(quote_end) = after_key[quote_start + 1..].find(quote_char) {
                    return Some(after_key[quote_start + 1..quote_start + 1 + quote_end].to_string());
                }
            }
        }
        None
    }
    
    fn parse_go_dependencies(go_mod_path: &Path) -> Result<Vec<String>> {
        let mut dependencies = Vec::new();
        
        let content = fs::read_to_string(go_mod_path)
            .context("Failed to read go.mod")?;
        
        let mut in_require_block = false;
        let mut paren_require = false;
        
        for line in content.lines() {
            let trimmed = line.trim();
            
            // Skip empty lines and comments
            if trimmed.is_empty() || trimmed.starts_with("//") {
                continue;
            }
            
            // Check for require block start
            if trimmed.starts_with("require") {
                if trimmed.contains('(') {
                    // Multi-line require block
                    in_require_block = true;
                    paren_require = true;
                    continue;
                } else if trimmed.contains(' ') {
                    // Single line require
                    if let Some(dep) = Self::parse_go_require_line(trimmed) {
                        dependencies.push(dep);
                    }
                    continue;
                }
            }
            
            // Check for require block end
            if in_require_block && paren_require && trimmed == ")" {
                in_require_block = false;
                paren_require = false;
                continue;
            }
            
            // Parse dependencies within require block
            if in_require_block {
                if let Some(dep) = Self::parse_go_dependency_line(trimmed) {
                    dependencies.push(dep);
                }
            }
            
            // Also check for replace directives that might add dependencies
            if trimmed.starts_with("replace") {
                // Replace directives can introduce new dependencies
                // Format: replace old => new version
                if let Some(arrow_pos) = trimmed.find("=>") {
                    let new_part = trimmed[arrow_pos + 2..].trim();
                    if let Some(dep) = Self::parse_go_module_path(new_part) {
                        // Only add if it's not a local path
                        if !dep.starts_with('.') && !dep.starts_with('/') {
                            dependencies.push(dep);
                        }
                    }
                }
            }
        }
        
        // Remove duplicates and sort
        dependencies.sort();
        dependencies.dedup();
        
        Ok(dependencies)
    }
    
    fn parse_go_require_line(line: &str) -> Option<String> {
        // Format: require module/path v1.2.3
        let parts: Vec<&str> = line.split_whitespace().collect();
        if parts.len() >= 3 && parts[0] == "require" {
            return Some(parts[1].to_string());
        }
        None
    }
    
    fn parse_go_dependency_line(line: &str) -> Option<String> {
        // Format: module/path v1.2.3
        let parts: Vec<&str> = line.split_whitespace().collect();
        if parts.len() >= 2 {
            let module = parts[0];
            // Skip if it's a comment or doesn't look like a module path
            if !module.starts_with("//") && module.contains('/') {
                return Some(module.to_string());
            }
        }
        None
    }
    
    fn parse_go_module_path(text: &str) -> Option<String> {
        // Extract module path from text that might contain version
        let parts: Vec<&str> = text.split_whitespace().collect();
        if !parts.is_empty() {
            let module = parts[0];
            if module.contains('/') && !module.starts_with("//") {
                return Some(module.to_string());
            }
        }
        None
    }
}

impl BuildConfig {
    pub fn get_command(&self, command_type: &str) -> Option<&str> {
        match command_type {
            "build" => self.commands.build.as_deref(),
            "test" => self.commands.test.as_deref(),
            "lint" => self.commands.lint.as_deref(),
            "format" => self.commands.format.as_deref(),
            "run" => self.commands.run.as_deref(),
            "clean" => self.commands.clean.as_deref(),
            custom => self.commands.custom.get(custom).map(|s| s.as_str()),
        }
    }

    pub fn all_commands(&self) -> Vec<(&str, &str)> {
        let mut commands = vec![];

        if let Some(cmd) = &self.commands.build {
            commands.push(("build", cmd.as_str()));
        }
        if let Some(cmd) = &self.commands.test {
            commands.push(("test", cmd.as_str()));
        }
        if let Some(cmd) = &self.commands.lint {
            commands.push(("lint", cmd.as_str()));
        }
        if let Some(cmd) = &self.commands.format {
            commands.push(("format", cmd.as_str()));
        }
        if let Some(cmd) = &self.commands.run {
            commands.push(("run", cmd.as_str()));
        }
        if let Some(cmd) = &self.commands.clean {
            commands.push(("clean", cmd.as_str()));
        }

        for (name, cmd) in &self.commands.custom {
            commands.push((name.as_str(), cmd.as_str()));
        }

        commands
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::fs;
    use tempfile::TempDir;

    #[test]
    fn test_detect_cargo() {
        let temp_dir = TempDir::new().unwrap();
        let cargo_toml = r#"
[package]
name = "test-project"
version = "0.1.0"

[dependencies]
serde = "1.0"
tokio = "1.0"

[dev-dependencies]
mockito = "0.31"

[alias]
ci = "check --all-features"
"#;
        fs::write(temp_dir.path().join("Cargo.toml"), cargo_toml).unwrap();

        let config = BuildSystemDetector::detect(temp_dir.path()).unwrap();
        assert_eq!(config.system, BuildSystem::Cargo);
        assert_eq!(config.commands.build, Some("cargo build".to_string()));
        assert!(config.dependencies.contains(&"serde".to_string()));
        assert!(config.dev_dependencies.contains(&"mockito".to_string()));
        assert_eq!(
            config.commands.custom.get("ci"),
            Some(&"cargo check --all-features".to_string())
        );
    }

    #[test]
    fn test_detect_npm() {
        let temp_dir = TempDir::new().unwrap();
        let package_json = r#"{
    "name": "test-project",
    "version": "1.0.0",
    "scripts": {
        "build": "webpack",
        "test": "jest",
        "dev": "nodemon server.js",
        "custom-task": "echo custom"
    },
    "dependencies": {
        "express": "^4.17.1",
        "lodash": "^4.17.21"
    },
    "devDependencies": {
        "jest": "^27.0.0"
    }
}"#;
        fs::write(temp_dir.path().join("package.json"), package_json).unwrap();

        let config = BuildSystemDetector::detect(temp_dir.path()).unwrap();
        assert_eq!(config.system, BuildSystem::Npm);
        assert_eq!(config.commands.build, Some("npm run build".to_string()));
        assert_eq!(config.commands.run, Some("npm run dev".to_string()));
        assert!(config.dependencies.contains(&"express".to_string()));
        assert!(config.dev_dependencies.contains(&"jest".to_string()));
        assert_eq!(
            config.commands.custom.get("custom-task"),
            Some(&"npm run custom-task".to_string())
        );
    }

    #[test]
    fn test_detect_yarn() {
        let temp_dir = TempDir::new().unwrap();
        fs::write(temp_dir.path().join("package.json"), r#"{"name": "test"}"#).unwrap();
        fs::write(temp_dir.path().join("yarn.lock"), "").unwrap();

        let config = BuildSystemDetector::detect(temp_dir.path()).unwrap();
        assert_eq!(config.system, BuildSystem::Yarn);
    }

    #[test]
    fn test_detect_poetry() {
        let temp_dir = TempDir::new().unwrap();
        let pyproject = r#"
[tool.poetry]
name = "test-project"
version = "0.1.0"

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.26.0"

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"

[tool.poetry.scripts]
serve = "myapp:serve"
"#;
        fs::write(temp_dir.path().join("pyproject.toml"), pyproject).unwrap();

        let config = BuildSystemDetector::detect(temp_dir.path()).unwrap();
        assert_eq!(config.system, BuildSystem::Poetry);
        assert_eq!(config.commands.build, Some("poetry build".to_string()));
        assert!(config.dependencies.contains(&"requests".to_string()));
        assert!(config.dev_dependencies.contains(&"pytest".to_string()));
        assert_eq!(
            config.commands.custom.get("serve"),
            Some(&"poetry run serve".to_string())
        );
    }

    #[test]
    fn test_unknown_build_system() {
        let temp_dir = TempDir::new().unwrap();
        let config = BuildSystemDetector::detect(temp_dir.path()).unwrap();
        assert_eq!(config.system, BuildSystem::Unknown);
        assert!(config.commands.build.is_none());
    }
}
