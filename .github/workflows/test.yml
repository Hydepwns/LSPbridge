name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    # Install LSP servers for integration tests
    - name: Install rust-analyzer
      if: matrix.rust == 'stable'
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-pc-windows-msvc.gz | gunzip > rust-analyzer.exe
          mkdir -p $HOME/.cargo/bin
          mv rust-analyzer.exe $HOME/.cargo/bin/
        else
          curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip > rust-analyzer
          chmod +x rust-analyzer
          mkdir -p $HOME/.cargo/bin
          mv rust-analyzer $HOME/.cargo/bin/
        fi
      shell: bash
    
    - name: Install Node.js
      if: matrix.rust == 'stable'
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install typescript-language-server
      if: matrix.rust == 'stable'
      run: npm install -g typescript-language-server typescript
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests (with LSP servers)
      if: matrix.rust == 'stable'
      run: |
        export PATH=$HOME/.cargo/bin:$PATH
        cargo test --verbose
        cargo test --test integration -- --ignored
    
    - name: Run tests (without LSP servers)
      if: matrix.rust != 'stable'
      run: cargo test --verbose
    
    - name: Build documentation
      run: cargo doc --no-deps

  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: cargo tarpaulin --out Xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml