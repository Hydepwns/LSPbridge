name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## LSPbridge ${{ steps.get_version.outputs.version }}
          
          ### Features
          - High-performance diagnostic bridge
          - Multi-language support
          - AI-optimized output formats
          - Privacy-aware filtering
          
          ### Installation
          
          #### From binary
          Download the appropriate binary for your platform and add it to your PATH.
          
          #### From source
          ```bash
          cargo install lspbridge
          ```
          
          ### Checksums
          See checksums.txt in the release assets.

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: lspbridge
            asset_name: lspbridge-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: lspbridge
            asset_name: lspbridge-linux-arm64
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: lspbridge
            asset_name: lspbridge-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: lspbridge
            asset_name: lspbridge-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: lspbridge.exe
            asset_name: lspbridge-windows-amd64.exe

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.use_cross
      run: cargo install cross

    - name: Build release binary (cross)
      if: matrix.use_cross
      run: cross build --release --target ${{ matrix.target }}

    - name: Build release binary (cargo)
      if: '!matrix.use_cross'
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        elif [ "${{ runner.os }}" = "macOS" ]; then
          strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        fi

    - name: Create tarball (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
        cd ../../../
        shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

    - name: Create zip (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path target\${{ matrix.target }}\release\${{ matrix.binary_name }} -DestinationPath ${{ matrix.asset_name }}.zip
        (Get-FileHash ${{ matrix.asset_name }}.zip -Algorithm SHA256).Hash | Out-File -FilePath "${{ matrix.asset_name }}.zip.sha256"

    - name: Upload Release Asset (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset Checksum (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz.sha256
        asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
        asset_content_type: text/plain

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

    - name: Upload Release Asset Checksum (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip.sha256
        asset_name: ${{ matrix.asset_name }}.zip.sha256
        asset_content_type: text/plain

  publish-crate:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      continue-on-error: true  # Allow failure if package already published

  docker-release:
    name: Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/lspbridge:${{ needs.create-release.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/lspbridge:latest
          ghcr.io/${{ github.repository_owner }}/lspbridge:${{ needs.create-release.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/lspbridge:latest