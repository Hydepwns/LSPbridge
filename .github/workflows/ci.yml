name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Skip beta and nightly on Windows to save CI time
          - os: windows-latest
            rust: beta
          - os: windows-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-build-

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test integration --verbose
      continue-on-error: true  # Integration tests may require LSP servers

    - name: Run doc tests
      run: cargo test --doc --verbose

    - name: Build release mode
      run: cargo build --release --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
        fail_ci_if_error: false
        verbose: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  benchmarks:
    name: Performance Benchmarks & Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    permissions:
      contents: write
      pull-requests: write
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0  # Needed for git history

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq python3-pip
        python3 -m pip install matplotlib seaborn pandas

    - name: Download previous benchmark data
      uses: actions/cache@v4
      with:
        path: benchmark-results
        key: ${{ runner.os }}-benchmarks-${{ github.ref_name }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-benchmarks-${{ github.ref_name }}-
          ${{ runner.os }}-benchmarks-main-

    - name: Run Benchmark Dashboard
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        CI: true
      run: |
        ./scripts/benchmark-dashboard.sh run

    - name: Store benchmark results
      uses: actions/cache@v4
      with:
        path: benchmark-results
        key: ${{ runner.os }}-benchmarks-${{ github.ref_name }}-${{ github.sha }}

    - name: Upload benchmark artifacts
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: |
          benchmark-results/latest/
          benchmark-results/reports/
        retention-days: 30

    - name: Comment on PR with benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest performance report
          const reportsDir = 'benchmark-results/reports';
          if (fs.existsSync(reportsDir)) {
            const files = fs.readdirSync(reportsDir)
              .filter(f => f.startsWith('performance_report_') && f.endsWith('.md'))
              .sort()
              .reverse();
            
            if (files.length > 0) {
              const reportPath = path.join(reportsDir, files[0]);
              const report = fs.readFileSync(reportPath, 'utf8');
              
              // Find existing comment or create new one
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('LSPbridge Performance Report')
              );
              
              const body = `## ðŸš€ Benchmark Results\n\n${report}\n\n---\n*This comment will be updated with each push*`;
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: body
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
              }
            }
          }

    - name: Generate benchmark visualization
      run: |
        python3 scripts/generate_benchmark_charts.py
      continue-on-error: true

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./benchmark-results/reports
        destination_dir: benchmarks

  check-licenses:
    name: License Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Check licenses
      run: cargo deny check licenses

  publish-dry-run:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Dry run publish
      run: cargo publish --dry-run

  msrv-check:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust 1.70.0 (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.70.0
    
    - name: Check MSRV
      run: cargo check --all-features